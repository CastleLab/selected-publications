[{"title":"ÐArcher: Detecting On-Chain-Off-Chain Synchronization Bugs in Decentralized Applications","date":"2021","authors":["Wuqi Zhang","Lili Wei","Shuqing Li","Yepang Liu","Shing-Chi Cheung"],"venue":"Proceedings of the 29th ACM Joint European SoftwareEngineering Conference and Symposium on the Foundations of Software Engi-neering (ESEC/FSE ’21)","venueShort":"ESEC/FSE","tags":["Decentralized Applications","Testing","Blockchain"],"abstract":"Since the emergence of Ethereum, blockchain-based decentralized applications (DApps) have become increasingly popular and important. To balance the security, performance, and costs, a DApp typically consists of two layers: an on-chain layer to execute transactions and store crucial data on blockchain, and an off-chain layer to interact with users. A DApp needs to proactively synchronize its off-chain layer with the on-chain layer, otherwise, the inconsistent data in the off-chain layer could mislead users and cause undesirable consequences, e.g., loss of transaction fees. However, transactions sent to blockchain are not guaranteed to be executed and could even be reversed after execution due to chain reorganization. Such non-determinism in the transaction execution is unique to blockchain and DApp developers may fail to perform the on-chain-off-chain synchronization accurately due to their unfamiliarity of the complex transaction lifecycle.\n\nIn this work, we investigate the challenges of synchronizing on-chain and off-chain data in Ethereum-based DApps. We present two types of bugs that could result in inconsistencies between the on-chain and off-chain layers. To help detect such on-chain-off-chain synchronization bugs, we introduce a state transition model to guide the testing of DApps, and propose two effective oracles to facilitate the automatic identification of bugs. We build the first testing framework, ÐArcher, to detect on-chain-off-chain synchronization bugs in DApps. We have evaluated ÐArcher on 11 popular real-world DApps. ÐArcher achieves high precision (99.3%), recall (87.6%), and accuracy (89.4%) in bug detection and significantly outperforms the baseline methods. It has found 15 real bugs in the 11 DApps. So far, six of the 15 bugs have been confirmed by the developers and three have been fixed. These promising results demonstrate the usefulness of ÐArcher.","project":"https://github.com/Troublor/darcher","url":null,"bibtex":null,"awards":[]},{"title":"To What Extent Do DNN-based Image Classification Models Make Unreliable Inferences?","date":"2021","authors":["Yongqiang Tian","Shiqing Ma","Ming Wen","Yepang Liu","Shing-Chi Cheung","Xiangyu Zhang"],"venue":"Empirical Software Engineering","venueShort":"EMSE","tags":["Testing","DNN model","Metamorphic Testing"],"abstract":"Deep Neural Network (DNN) models are widely used for image classification. While they offer high performance in terms of accuracy, researchers are concerned about if these models inappropriately make inferences using features irrelevant to the target object in a given image. To address this concern, we propose a metamorphic testing approach that assesses if a given inference is made based on irrelevant features. Specifically, we propose two metamorphic relations (MRs) to detect such unreliable inferences. These relations expect (a) the classification results with different labels or the same labels but less certainty from models after corrupting the relevant features of images, and (b) expect the classification results with the same labels after corrupting irrelevant features. The inferences that violate the metamorphic relations are regarded as unreliable inferences.\nOur evaluation demonstrated that our approach can effectively identify unreliable inferences for single-label classification models with an average precision of 64.1% and 96.4% for the two MRs, respectively. As for multi-label classification models, the corresponding precision for MR-1 and MR-2 is 78.2% and 86.5%, respectively. Further, we conducted an empirical study to understand the problem of unreliable inferences in practice. Specifically, we applied our approach to 18 pre-trained single-label image classification models and 3 multi-label classification models, and then examined their inferences on the ImageNet and COCO datasets. We found that unreliable inferences are pervasive. Specifically, for each model, more than thousands of correct classifications are actually made using irrelevant features. Next, we investigated the effect of such pervasive unreliable inferences, and found that they can cause significant degradation of a model's overall accuracy. After including these unreliable inferences from the test set, the model's accuracy can be significantly changed. Therefore, we recommend that developers should pay more attention to these unreliable inferences during the model evaluations. We also explored the correlation between model accuracy and the size of unreliable inferences. We found the inferences of the input with smaller objects are easier to be unreliable. Lastly, we found that the current model training methodologies can guide the models to learn object-relevant features to certain extent, but may not necessarily prevent the model from making unreliable inferences. We encourage the community to propose more effective training methodologies to address this issue.\n","project":"https://github.com/yqtianust/PaperUnreliableInference","url":"https://home.cse.ust.hk/~ytianas/pub/unreliable_inferneces_emse.pdf","bibtex":null,"awards":[]},{"title":"EvalDNN: a toolbox for evaluating deep neural network models","date":"2020","authors":["Yongqiang Tian","Zhihua Zeng","Ming Wen","Yepang Liu","Tzu-yang Kuo","Shing-Chi Cheung"],"venue":"42nd International Conference on Software Engineering, Demo","venueShort":"ICSE Demo","tags":["Testing","DNN model","Benchmark"],"project":"https://github.com/yqtianust/EvalDNN","url":"https://doi.org/10.1145/3377812.3382133","abstract":null,"bibtex":null,"awards":[]},{"title":"A Comprehensive Study of Deep Learning Compiler Bugs","date":"2021","authors":["Qingchao Shen","Haoyang Ma","Junjie Chen","Yongqiang Tian","Shing-Chi Cheung","Xiang Chen"],"venue":"Proceedings of the 29th ACM Joint European SoftwareEngineering Conference and Symposium on the Foundations of Software Engi-neering (ESEC/FSE ’21)","venueShort":"ESEC/FSE","tags":["DL Compiler","Empirical Study"],"project":"https://github.com/ShenQingchao/DLCstudy","url":null,"abstract":null,"bibtex":null,"awards":[]},{"title":"AdvDoor: Adversarial Backdoor Attack of Deep Learning System","date":"2021","authors":["Quan Zhang","Yifeng Ding","Yongqiang Tian","Jianmin Guo","Min Yuan","Yu Jiang"],"venue":"ACM SIGSOFT International Symposium on Software Testing and Analysis","venueShort":"ISSTA","tags":["DNN model","Backdoor Attack"],"project":"https://github.com/AdvDoor/AdvDoor","url":null,"abstract":null,"bibtex":null,"awards":[]}]